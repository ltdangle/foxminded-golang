// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
  uuid, email, password, first_name, last_name, nickname, created_at, updated_at
) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	Uuid      sql.NullString `json:"uuid"`
	Email     sql.NullString `json:"email"`
	Password  sql.NullString `json:"password"`
	FirstName sql.NullString `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
	Nickname  sql.NullString `json:"nickname"`
	CreatedAt sql.NullTime   `json:"created_at"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Uuid,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.Nickname,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const findAllUsers = `-- name: FindAllUsers :many
SELECT uuid, email, password, first_name, last_name, nickname, created_at, updated_at FROM users ORDER BY created_at desc LIMIT ? OFFSET ?
`

type FindAllUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) FindAllUsers(ctx context.Context, arg FindAllUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, findAllUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Uuid,
			&i.Email,
			&i.Password,
			&i.FirstName,
			&i.LastName,
			&i.Nickname,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByEmailPass = `-- name: FindUserByEmailPass :one
SELECT uuid, email, password, first_name, last_name, nickname, created_at, updated_at FROM users
WHERE email = ? and password = ? LIMIT 1
`

type FindUserByEmailPassParams struct {
	Email    sql.NullString `json:"email"`
	Password sql.NullString `json:"password"`
}

func (q *Queries) FindUserByEmailPass(ctx context.Context, arg FindUserByEmailPassParams) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmailPass, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.Nickname,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT uuid, email, password, first_name, last_name, nickname, created_at, updated_at FROM users
WHERE uuid = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, uuid sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, uuid)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.Nickname,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET email = ?, password = ?, first_name = ?, last_name = ?, nickname = ?, updated_at = ? WHERE uuid = ?
`

type UpdateUserParams struct {
	Email     sql.NullString `json:"email"`
	Password  sql.NullString `json:"password"`
	FirstName sql.NullString `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
	Nickname  sql.NullString `json:"nickname"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	Uuid      sql.NullString `json:"uuid"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.Nickname,
		arg.UpdatedAt,
		arg.Uuid,
	)
	return err
}
